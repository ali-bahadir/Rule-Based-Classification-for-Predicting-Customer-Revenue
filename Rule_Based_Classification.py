#############################################
# Rule-Based Classification for Predicting Potential Customer Revenue
#############################################

#############################################
# TASK 1: Answer the following questions.
#############################################

# Question 1: Load the persona.csv file and show general information about the dataset.

import pandas as pd
import seaborn as sns

pd.set_option('display.max_columns', None)
pd.set_option('display.width', 500)

df = pd.read_csv("Python Programming for Data Science/datasets/persona.csv")
df.head()
df.shape
df.info()

# Question 2: How many unique SOURCE values exist? What are their frequencies?
df["SOURCE"].unique()
df["SOURCE"].nunique()
df["SOURCE"].value_counts()

# Question 3: How many unique PRICE values exist?
df["PRICE"].nunique()

# Question 4: How many sales occurred for each PRICE?
df["PRICE"].value_counts()

# Question 5: How many sales occurred in each country?
df["COUNTRY"].value_counts()

df.pivot_table(values="PRICE", index="COUNTRY", aggfunc="count")

# Question 6: What is the total revenue generated by each country?
df.groupby("COUNTRY").agg({"PRICE": "sum"})

df.pivot_table(values="PRICE", index="COUNTRY", aggfunc="sum")

# Question 7: What are the sales counts by SOURCE types?
df["SOURCE"].value_counts()

# Question 8: What are the average revenues by country?
df.groupby("COUNTRY").agg({"PRICE": "mean"})

# Question 9: What are the average revenues by SOURCE types?
df.groupby("SOURCE").agg({"PRICE": "mean"})

# Question 10: What are the average revenues for COUNTRY-SOURCE combinations?
df.groupby(["COUNTRY", "SOURCE"]).agg({"PRICE": "mean"})

#############################################
# TASK 2: What are the average revenues for COUNTRY, SOURCE, SEX, and AGE breakdowns?
#############################################
df.groupby(["COUNTRY", "SOURCE", "SEX", "AGE"]).agg({"PRICE": "mean"})

#############################################
# TASK 3: Sort the output by PRICE.
#############################################
agg_df = df.groupby(["COUNTRY", "SOURCE", "SEX", "AGE"]).agg({"PRICE": "mean"}).sort_values("PRICE", ascending=False)

#############################################
# TASK 4: Convert the index names to variable names.
#############################################
agg_df = agg_df.reset_index()

#############################################
# TASK 5: Convert the AGE variable to a categorical variable and add it to agg_df.
#############################################
# Convert the numerical AGE variable to a categorical variable.
# Create intervals that you find convincing.
# For example: '0_18', '19_23', '24_30', '31_40', '41_70'

bins = [-1, 18, 23, 30, 40, df["AGE"].max()]
labels = ['0_18', '19_23', '24_30', '31_40', '41_' + str(agg_df["AGE"].max())]

agg_df["AGE_CAT"] = pd.cut(agg_df["AGE"], bins, labels=labels)
agg_df.head()

#############################################
# TASK 6: Define new level-based customers and add them as a variable to the dataset.
#############################################
# Define a variable called customers_level_based and add it to the dataset.
# Note:
# After creating customers_level_based values with list comprehension,
# these values should be made unique.
# For example, there could be multiple entries for the same segment such as: USA_ANDROID_MALE_0_18.
# We need to group these by segment and calculate the average PRICE.

agg_df["customers_level_based"] = agg_df[["COUNTRY", "SOURCE", "SEX", "AGE_CAT"]].agg(lambda x: '_'.join(x).upper(), axis=1)
agg_df = agg_df[["customers_level_based", "PRICE"]]

# There is a small issue here. There will be many duplicate segments.
# For example, there may be many entries for the segment USA_ANDROID_MALE_0_18.
# Let's check:
agg_df["customers_level_based"].value_counts()

# Therefore, we need to group by segment, calculate the average PRICE, and make the segments unique.
agg_df = agg_df.groupby("customers_level_based").agg({"PRICE": "mean"})

# customers_level_based is currently in the index. Convert it to a variable.
agg_df = agg_df.reset_index()
agg_df.head()

agg_df["customers_level_based"].value_counts()
agg_df.head()

#############################################
# TASK 7: Segment new customers (e.g., USA_ANDROID_MALE_0_18).
#############################################
# Segment customers by PRICE,
# Name the segments "SEGMENT" and add them to agg_df,
# Describe the segments.

agg_df["SEGMENT"] = pd.qcut(agg_df["PRICE"], 4, labels=["D", "C", "B", "A"])
agg_df.head()

agg_df.groupby("SEGMENT").agg({"PRICE": "mean"})

#############################################
# TASK 8: Classify new customers and predict their potential revenue.
#############################################
# Which segment does a 33-year-old Turkish woman using ANDROID belong to, and how much average revenue is expected?

new_user = "TUR_ANDROID_FEMALE_31_40"
agg_df[agg_df["customers_level_based"] == new_user]

# Which segment does a 35-year-old French woman using IOS belong to, and how much average revenue is expected?
new_user = "FRA_IOS_FEMALE_31_40"
agg_df[agg_df["customers_level_based"] == new_user]
